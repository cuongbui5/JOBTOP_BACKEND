package com.example.jobs_top.utils;


import com.example.jobs_top.dto.res.JobDto;
import com.example.jobs_top.model.Account;
import com.example.jobs_top.model.Job;
import com.example.jobs_top.security.UserPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;

import java.time.Instant;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;

public class Utils {
    public static Account getAccount() {
        UserPrincipal userPrincipal  = (UserPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        return userPrincipal.getUser();
    }
    public static String buildJobDtoContent(JobDto job) {
        StringBuilder content = new StringBuilder();

        content.append("üîπ V·ªã tr√≠: ").append(job.getTitle()).append("\n");
        content.append("üè¢ C√¥ng ty: ").append(job.getCompany().getName()).append("\n");
        content.append("üìç ƒê·ªãa ƒëi·ªÉm: ").append(job.getCity()).append(", ").append(job.getCity()).append("\n");
        content.append("üíº H√¨nh th·ª©c l√†m vi·ªác: ").append(job.getJobType().getLabel()).append("\n");
        content.append("üìà Kinh nghi·ªám: ").append(job.getExperienceLevel().getLabel()).append("\n");

        content.append("üí∞ M·ª©c l∆∞∆°ng: ");
        if (job.getSalaryMin() != null && job.getSalaryMax() != null) {
            content.append(String.format("%,d - %,d VND", job.getSalaryMin(), job.getSalaryMax()));
        } else {
            content.append("Th·ªèa thu·∫≠n");
        }
        content.append("\n");

        content.append("üìÖ H·∫°n n·ªôp h·ªì s∆°: ").append(job.getApplicationDeadline()).append("\n");
        content.append("üìé M√¥ t·∫£: ")
                .append(job.getDescription() != null && job.getDescription().length() > 100
                        ? job.getDescription().substring(0, 100) + "..."
                        : job.getDescription()).append("\n");
        content.append("üëâ ·ª®ng tuy·ªÉn ngay!\n\n");

        return content.toString();
    }

    public static String buildJobDtoListEmailContent(List<JobDto> jobs) {
        StringBuilder content = new StringBuilder();

        content.append("Ch√†o b·∫°n,\n\n");
        content.append("D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë c∆° h·ªôi vi·ªác l√†m ph√π h·ª£p d√†nh cho b·∫°n:\n\n");

        for (JobDto job : jobs) {
            content.append(buildJobDtoContent(job));
        }

        content.append("Ch√∫c b·∫°n s·ªõm t√¨m ƒë∆∞·ª£c c√¥ng vi·ªác ph√π h·ª£p!\n");
        content.append("Tr√¢n tr·ªçng,\n");
        content.append("ƒê·ªôi ng≈© JobsTop");

        return content.toString();
    }


    public static String buildJobItemContent(Job job) {
        StringBuilder content = new StringBuilder();

        content.append("üîπ V·ªã tr√≠: ").append(job.getTitle()).append("\n");
        content.append("üè¢ C√¥ng ty: ").append(job.getCompany().getName()).append("\n");
        content.append("üìç ƒê·ªãa ƒëi·ªÉm: ").append(job.getCity()).append(", ").append(job.getCity()).append("\n");
        content.append("üíº H√¨nh th·ª©c l√†m vi·ªác: ").append(job.getJobType().getLabel()).append("\n");
        content.append("üìà Kinh nghi·ªám: ").append(job.getExperienceLevel().getLabel()).append("\n");

        content.append("üí∞ M·ª©c l∆∞∆°ng: ");
        if (job.getSalaryMin() != null && job.getSalaryMax() != null) {
            content.append(String.format("%,d - %,d VND", job.getSalaryMin(), job.getSalaryMax()));
        } else {
            content.append("Th·ªèa thu·∫≠n");
        }
        content.append("\n");

        content.append("üìÖ H·∫°n n·ªôp h·ªì s∆°: ").append(job.getApplicationDeadline()).append("\n");
        content.append("üìé M√¥ t·∫£: ")
                .append(job.getDescription() != null && job.getDescription().length() > 100
                        ? job.getDescription().substring(0, 100) + "..."
                        : job.getDescription()).append("\n");
        content.append("üëâ ·ª®ng tuy·ªÉn ngay!\n\n");

        return content.toString();
    }



    public static String buildJobListEmailContent(List<Job> jobs) {
        StringBuilder content = new StringBuilder();

        content.append("Ch√†o b·∫°n,\n\n");
        content.append("D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë c∆° h·ªôi vi·ªác l√†m ph√π h·ª£p d√†nh cho b·∫°n:\n\n");

        for (Job job : jobs) {
            content.append(buildJobItemContent(job));
        }

        content.append("Ch√∫c b·∫°n s·ªõm t√¨m ƒë∆∞·ª£c c√¥ng vi·ªác ph√π h·ª£p!\n");
        content.append("Tr√¢n tr·ªçng,\n");
        content.append("ƒê·ªôi ng≈© JobsTop");

        return content.toString();
    }


    public static Date zonedDateTimeToDate(String zonedDateTimeStr) {
        DateTimeFormatter formatter = DateTimeFormatter.ISO_ZONED_DATE_TIME;
        ZonedDateTime zonedDateTime = ZonedDateTime.parse(zonedDateTimeStr, formatter);
        Instant instant = zonedDateTime.toInstant();
        return Date.from(instant);
    }
}
